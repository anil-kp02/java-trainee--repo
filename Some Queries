use auth;
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    age INT,
    country VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO users (name, email, age, country) VALUES
('Alice', 'alice@example.com', 25, 'USA'),
('Bob', 'bob@example.com', 30, 'Canada'),
('Charlie', 'charlie@example.com', 28, 'UK'),
('David', 'david@example.com', 35, 'Germany'),
('Emma', 'emma@example.com', 22, 'France'),
('Frank', 'frank@example.com', 40, 'Italy'),
('Grace', 'grace@example.com', 27, 'Spain'),
('Henry', 'henry@example.com', 33, 'USA'),
('Ivy', 'ivy@example.com', 29, 'Canada'),
('Jack', 'jack@example.com', 31, 'UK');

select * from users;

# retrive Duplicate Entries for name 
select * from
	(select * ,row_number() over(partition by name order by id) as rn
	from users)  x
where x.rn >1;

# second highest age
select * from users order by age desc limit 1 offset 2;

# selct users age having greater than avergae age 
select * from users where 
	age >
    (select AVG(age) from users);
    
# country wise avg graeter 
select * from users u1
where u1.age >
	(select AVG(u2.age)
	 from users u2
	 where u2.country = u1.country);

# avergae age of each country group 
select country ,AVG(age)
from users
group by country;

#find users whoregister in recent days.
select * from users 
where created_at > now() -interval 3 day

DELIMITER //
CREATE TRIGGER before_insert_users
BEFORE INSERT ON users
FOR EACH ROW
BEGIN
    SET NEW.created_at = NOW();
END;
//
DELIMITER ;

INSERT INTO users (name, email, age, country) VALUES
('Anil', 'anil@example.com', 24, 'INDIA');

alter table users
add column deleted_at timestamp default null;
ALTER TABLE users ADD COLUMN is_active BOOLEAN DEFAULT TRUE;

DELIMITER //
create trigger delete_user
before delete on users
for each row
begin
	update
    users set is_active = FALSE,
    deleted_at = now()
    where id=old.id;
end;
//
delimiter ;

DELETE FROM users WHERE id = 4;

select * from users where id = 5;

delimiter //
create procedure get_active_user()
begin
	select * from users where is_active=true;
end;
//
delimiter ;

call get_active_user();
